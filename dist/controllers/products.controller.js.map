{"version":3,"sources":["../../src/controllers/products.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\r\nimport ProductService from '@/services/products.service';\r\nimport { Product } from '@/models/products.model';\r\nimport { CreateProductDto } from '@/dtos/products.dto';\r\nimport { base64toImg } from '@/utils/util';\r\nimport fs from 'fs';\r\n\r\nclass ProductsController {\r\n  public productService = new ProductService();\r\n\r\n  public getProducts = async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      const findAllProductsData: Product[] = await this.productService.findAllProduct();\r\n\r\n      res.status(200).json({ data: findAllProductsData, message: 'findAll' });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public getProductById = async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      const productId = Number(req.params.id);\r\n      const findOneProductData: Product = await this.productService.findProductById(productId);\r\n\r\n      res.status(200).json({ data: findOneProductData, message: 'findOne' });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public createProduct = async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      const productData: CreateProductDto = req.body;\r\n      const productImage = productData.image;\r\n      const { image, imageName, extension } = base64toImg(productImage);\r\n      if (!image) throw Error('image is must base64 string!');\r\n\r\n      const filePath = `public/images/${imageName}.${extension}`;\r\n      fs.writeFileSync(filePath, image);\r\n\r\n      const createProductData: Product = await this.productService.createProduct({\r\n        ...productData,\r\n        image: `${imageName}.${extension}`,\r\n      });\r\n\r\n      res.status(201).json({ data: createProductData, message: 'created' });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public updateProduct = async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      const productId = Number(req.params.id);\r\n      const productData: CreateProductDto = req.body;\r\n\r\n      const payload = { ...productData };\r\n\r\n      const productImage = productData.image;\r\n      const { image, imageName, extension } = base64toImg(productImage);\r\n      if (image) {\r\n        const filePath = `public/images/${imageName}.${extension}`;\r\n        fs.writeFileSync(filePath, image);\r\n        payload.image = `${imageName}.${extension}`;\r\n      }\r\n\r\n      const updateProductData: Product = await this.productService.updateProduct(\r\n        productId,\r\n        payload,\r\n      );\r\n\r\n      res.status(200).json({ data: updateProductData, message: 'updated' });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public deleteProduct = async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      const productId = Number(req.params.id);\r\n      const deleteProductData: Product = await this.productService.deleteProduct(productId);\r\n\r\n      res.status(200).json({ data: deleteProductData, message: 'deleted' });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n}\r\n\r\nexport default ProductsController;\r\n"],"names":["ProductsController","productService","ProductService","getProducts","req","res","next","findAllProductsData","findAllProduct","status","json","data","message","error","getProductById","productId","Number","params","id","findOneProductData","findProductById","createProduct","productData","body","productImage","image","imageName","extension","base64toImg","Error","filePath","fs","writeFileSync","createProductData","updateProduct","payload","updateProductData","deleteProduct","deleteProductData"],"mappings":"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"}